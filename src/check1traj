#!/bin/bash
# 
# Purpose:
#       Collect rawdata and analyse them
# 
# Input: 
#       $1 = target directory 
#       $2 = file; name of sub-directory 
#       $3 = file; root of job name 
# 
# Output: (in target directory; anal_)
#       1. TE.dat : total energy 
#       2. PE.dat : potential energy
#       3. popu.dat : population 
#       4. nonadCoup.dat : nonadiabatic coupling 
#       5. traj.xyz : molecular structure in Cartesian coordinate
#       6. Bonds.ang : individual geometric parameter
# 
# 2022/07/12, Grace, H.G.Chuang@leeds.ac.uk
# 

function main(){

    #  type 1. multiple sub-directories 
    # orderedSubDir=(traj_10 traj_10_1) 
    # rootname=('methane' 'methane_420')

    home=`pwd`
    tarDir=$1
    orderedSubDir=( $(cat $2) )
    rootName=( $(cat $3) )
    # echo 'test input'
    # echo $tarDir, ${orderedSubDir[@]}
    # echo ${rootName[@]}
    # echo ''
    
    # Extract variables from testfile ($rootName.1)
    get_var ${orderedSubDir[0]} ${rootName[0]}.1 $tarDir 

    #   Generate an ordered list for qchem output files
    #   output: ordered_list.dat in each subdir.
    checkSubDir 


    #   Extract all necessary information to $tarDir. 
    #  
    combineDir 

    # output: PE.dat, TE.dat, popu.dat, traj.xyz and Bonds.ang 
    processData $tarDir 

}


function get_var(){
    # $1 = path of testing file 
    # $2 = testfile
    # $3 = target directory 
    # atomic unit for time : 2.4189 * 10^-17 sec.

    if [ -d $3 ]
    then 
        nPt_exist=$(wc -l $home/$3/PE.dat | awk '{print $1}')
    else 
        nPt_exist=0
        mkdir $3
    fi 

    cd  $home/$1
    testfile=$2

    if [ ! -f $testfile ]
    then 
        echo 'No dynamic input file, stop program.'
        exit 
    fi 

    natom=$( head -n 1 $testfile | awk '{print $1}')
    nstat=$( head -n 1 $testfile | awk '{print $2}')
    tstep=$( sed -n '3,3 p' $testfile | awk '{print $2}')
    nbranch=$( sed -n '2,2 p' $testfile | awk '{print $1}')
    time2fs=2.4189*0.01
    line=$(( 4 + $natom ))
    atomlist=( $(sed -n "5, $line p " $testfile | awk '{print $1}' ) )

    # set parameters for processData() 
    calcT=$(echo "scale=6; $tstep * $time2fs " | bc -l )

    # nonadiabatic coupling 
    tmp=$(awk ' !NF { printf sep NR ; sep=" " } END { printf "\n" }' $testfile | awk '{print $6}' )
    line_nonad_i=$(( $tmp +1 ))
    line_nonad_f=$(wc -l $testfile | cut -d ' ' -f 1 ) 
    n_nonad=$(( $nstat * ($nstat - 1) / 2 ))
    n_dof=$(( $natom * 3 ))

    # population 
    line_popu_i=$((7+2*$natom))
    line_popu_f=$((6+2*$natom+$nstat))
}


function checkSubDir(){
    # Generate an ordered list for qchem output files, and also analyse the status of these files.
    # 
    # output: ordered_list.dat and fail.dat in each subdirectory

    for ((subdir=0;subdir<${#orderedSubDir[@]};subdir++))
    do 
        cd $home/${orderedSubDir[$subdir]}
        echo ${orderedSubDir[$subdir]}
        genList ${rootName[$subdir]} # output: ordered_list.dat 
    done 
}


function genList(){
    # 
    # $1 = root name of trajectory 
    # 

    rtname=$1 
    npts=$( ls | grep -c _nonad.out )
    echo $rtname > ordered_list.dat  # point zero 
    for ((i=1;i<=$npts;i++))
    do 
        echo $1\_$i >> ordered_list.dat 
    done 

    # Only save the new data.
    # Consider point zero, such that the final point needs to add one. 
    if [ $nPt_exist != 0 ]
    then 
        sed -i "1, $(($nPt_exist+1)) d" ordered_list.dat 
    fi 
}


function combineDir(){
    # 
    # Copy all necessary qchem files into target directory; separate metadata to avoid original qchem files be contaminated.
    # 
    # input: 
    #   1. $tarDir: target directory 
    #   2. ${orderedSubDir[@]}: input sub-directory
    #   3. ordered_list.dat in each subdirectories
    # 
    # output: 
    #   $tarDir: reordered qchem output files 
    #   ${tot_npt[@]}
    # 

    # combine directory and move point into target directory 
    tot_npt=() 
    if [ $nbranch == 0 ] 
    then     
        pt_i=$nPt_exist 
        for ((dir=0; dir<${#orderedSubDir[@]}; dir++))
        do 
            cd $home/${orderedSubDir[$dir]}
            cp ordered_list.dat $home/$tarDir
            added_npt=$( wc -l ordered_list.dat | awk '{print $1}' )
            tot_npt+=( $(( $nPt_exist + $added_npt)) ) 
            
            for name in `cat ordered_list.dat`
            do 
                cp $name\_nonad.out $home/$tarDir 
                cp $name.te $home/$tarDir
                cp $name.1 $home/$tarDir
            done 

            # rename and reorder each point
            cd $home/$tarDir 
            for name in `cat ordered_list.dat`
            do 
                pt_i=$(($pt_i + 1 ))
                mv $name\_nonad.out $pt_i.out 
                mv $name.te $pt_i.te 
                mv $name.1 $pt_i.1
            done  
        done 
    elif [ $nbranch == 1 ] #FIXME: cloning
    then 
        echo 'fix cloning'
        exit 
    fi 
}


function processData(){
    # $1 = target directory

    tardir=$1 

    cd $home/$tardir 

    # create header if there is no metadata 
    if [ $nPt_exist == 0 ]
    then 
        rm -f PE.dat TE.dat popu.dat traj.xyz Bonds.ang nonadCoup.dat 

        # Formating header for Bond.ang
        bondname=()
        for (( i=1;i<=$natom; i++ ))
        do 
            idx1=$(( $i - 1 ))
            for (( j=$(( $i+1 )); j<=$natom; j++ ))
            do 
                idx2=$(( $j - 1 ))
                bondname+=(  ${atomlist[$idx1]}$i${atomlist[$idx2]}$j )
            done 
        done 
        echo "#t(fs) ${bondname[@]}(ang.)" > Bonds.dat 

        # Formating header for nonadCoup.dat 
        nonadname=() 
        for (( i=0; i < $nstat; i++ ))
        do 
            for (( j=$(( $i+1 )); j < $nstat; j++ ))
            do 
                nonadname+=( $i-$j )
            done 
        done
        echo "#t ${nonadname[@]}"  > nonadCoup.dat 
    fi 

    for ((pt_i=$(($nPt_exist+1)); pt_i<$tot_npt; pt_i++))
    do 
        t_i=$(echo "scale=6; $pt_i * $calcT " | bc -l )

        # 1. grep potential energy in each state: E.dat 
        Energy=$(grep 'Total energy for state' $pt_i.out | awk '{print $6}')
        echo $t_i ${Energy[@]} >> PE.dat

        te=$(cat $pt_i.te)
        echo $t_i $te >> TE.dat 

        # 2. generate xyz file for jmol molecular visulalization: traj.xyz 
        echo $natom >> traj.xyz 
        echo $t_i >> traj.xyz
        grep -A $(($natom + 2)) 'Standard Nuclear Orientation (Angstroms)' $pt_i.out | tail -n $natom | awk '{print $2, $3, $4, $5}' >> traj.xyz 

        # 3. calculate bond length: Bonds.ang  FIXME: time consuming 
        grep -A $(($natom + 2)) 'Standard Nuclear Orientation (Angstroms)' $pt_i.out | tail -n $natom | awk '{print $3, $4, $5}' > coord.tmp 
        genBondsFile $t_i coord.tmp #output: Bonds.dat 

        # 4. Calculate population 
        popu=()
        sed -n "$line_popu_i,$line_popu_f p" $pt_i.1 | sed 's/(//g' | sed 's/)//g' | sed 's/,/ /g' > popu.tmp
        popu_re=( $(awk '{print $1}' popu.tmp) )
        popu_im=( $(awk '{print $2}' popu.tmp) )
        for ((state_i=0;state_i<$nstat;state_i++))
        do 
            popu+=( $(awk "BEGIN { abs =  ${popu_re[$state_i]} * ${popu_re[$state_i]}  + ${popu_im[$state_i]}  * ${popu_im[$state_i]}; print $1, abs }") )
        done
        echo $t_i ${popu[@]} >> popu.dat 

        # 5. Calculate nonadiabatic coupling 
        nonadCoup=()    
        sed -n "$line_nonad_i, $line_nonad_f p" $pt_i.1 | awk '{print $1}' > coupling.tmp 
        for (( nonad_i=1; nonad_i<=$n_nonad; nonad_i++ ))
        do 
            c_i=$(( 1 + $n_dof * ($nonad_i -1) ))
            c_f=$(( $n_dof * $nonad_i ))
            sed -n "$c_i, $c_f p" coupling.tmp  > coupling_element.tmp 
            coup_tot=0
            for elem in `cat coupling_element.tmp`
            do 
                coup_tot=$( awk "BEGIN {print $coup_tot + ($elem)^2}" )
            done 
            coup_tot=$( awk "BEGIN {print sqrt($coup_tot)}" )
            nonadCoup+=( $coup_tot )
        done
        echo $t_i ${nonadCoup[@]} >> nonadCoup.dat 

    done 
    rm -f coord.tmp popu.tmp coupling.tmp coupling_element.tmp 
    # clean metafiles
    rm -f *.out *.1 *.te ordered_list.dat
}


function genBondsFile(){
    # $1 = time 
    # $2 = coord.tmp 
    # output: Bonds.dat  

    t_i=$1 

    coord_x=( $(cat $2 | awk '{print $1}') )
    coord_y=( $(cat $2 | awk '{print $2}') )
    coord_z=( $(cat $2 | awk '{print $3}') )

    Bonds=()
    for (( i=0; i < $natom; i++ ))
    do 
        atom1=( ${coord_x[$i]} ${coord_y[$i]} ${coord_z[$i]} )
        for (( j=$(($i+1)); j<$natom; j++ ))
        do 
            atom2=( ${coord_x[$j]} ${coord_y[$j]} ${coord_z[$j]} )

            # Calculate the bond length between two atoms
            BL12=()
            for (( idx=0; idx < 3 ; idx++ ))
            do 
                minusSign=$(echo ${atom2[$idx]} | grep -c '-')
                if [ $minusSign == 0 ]
                then 
                    BL12+=( $(echo "scale=4;(${atom1[$idx]}-${atom2[$idx]})^2 "|bc -l) )
                else
                    num2=$(echo ${atom2[$idx]} | sed 's/-//g')
                    BL12+=( $(echo "scale=4;(${atom1[$idx]} + $num2 )^2 "|bc -l) )
                fi 
            done
            
            Bonds+=( $(echo "scale=4;sqrt(${BL12[0]} + ${BL12[1]} + ${BL12[2]})" | bc -l) )

        done 
    done 
    
    echo $t_i ${Bonds[@]} >> Bonds.dat 

}


main $@