#!/bin/bash
# 
# Purpose:
#           Collect rawdata and analyse them
# 
# Input: 
#   $1 = name of sub-directory 
#   $2 = root of job name 
#   $3 = target directory 
# 
# Output: (in target directory; anal_)
#   1. TE.dat : total energy 
#   2. PE.dat : potential energy
#   3. popu.dat : population 
#   4. nonadCoup.dat : nonadiabatic coupling 
#   5. traj.xyz : molecular structure in Cartesian coordinate
#   6. Bonds.ang : individual geometric parameter
# 
# 2022/07/12, Grace, H.G.Chuang@leeds.ac.uk
# 2022/11/22, creat array atomlist() and then allow this script to be used for all molecules.
# 
# 

function main(){
    # 1. Generate an ordered list for qchem output files, and also analyse the status of these files.  

    home=`pwd`

    #  type 1. multiple sub-directories 
    # orderedSubDir=(traj_10 traj_10_1) 
    # rootname=('methane' 'methane_420')

    # type 2. one sub-directory 
    orderedSubDir=($1) 
    rootName=($2)
    tarDir=$3

    # Extract variables from testfile ($rootName.0)
    cd  $home/$orderedSubDir
    get_var $rootName.0

    # for ((subdir=0;subdir<${#orderedSubDir[@]};subdir++))
    # do 
    #     cd $home/${orderedSubDir[$subdir]}
    #     echo ${orderedSubDir[$subdir]}
    #     genList ${rootName[$subdir]} $nstate # output: ordered_list.dat 
    #     checkOut ordered_list.dat 
    #     echo '--------------------------------------'
    # done 

    # # 2. Extract desired information 
    # # Copy alll necessary qchem files into target directory; separate metadata to avoid contaminating original qchem files. 
    # # input: 
    # #   1. $tarDir 
    # #   2. ${orderedSubDir[@]}
    # #   3. ordered_list.dat in each subdirectories  
    # #   output directory: $tarDir (reordered qchem output files)
    # cd $home 
    # combineDir 

    # output: PE.dat, TE.dat, popu.dat, traj.xyz and Bonds.ang 
    cd $home 
    processData $tarDir 

}

function get_var(){
    # $1 = testfile
    # atomic unit for time : 2.4189 * 10^-17 sec.
    natom=$( head -n 1 $1 | awk '{print $1}')
    nstate=$( head -n 1 $1 | awk '{print $2}')
    tstep=$( sed -n '3,3 p' $1 | awk '{print $2}')
    time2fs=2.4189*0.01
    line=$(( 4 + $natom ))
    atomlist=( $(sed -n "5, $line p " $1 | awk '{print $1}' ) )
}

function genList(){
    # $1 = root name of trajectory 
    # $2 = highest excited state 

    totfile=$(ls | grep -c out)
    npts=$(($totfile / ( $2 + 1 ) ))
    restpts=$(($totfile % ( $2 + 1 ) ))
    rm -f ordered_list.dat 
    for ((i=1;i<=$npts;i++))
    do 
        rtname=$1\_$i
        echo $rtname\_nonad.out >> ordered_list.dat 
        for (( s=1; s<=$2; s++ ))
        do 
            echo $rtname\_force\_$s.out >> ordered_list.dat 
        done 
    done 
    if [ $restpts -ge 1 ]
    then 
        echo $1\_$(($i))\_nonad.out >> ordered_list.dat 
        if [ $restpts -gt 1 ]
        then 
            for (( s=1; s<=$(( $restpts-1 )); s++ ))
            do
                echo $1\_$(($i))\_force\_$s.out >> ordered_list.dat 
            done 
        fi 
    fi 
}

function checkOut(){
    # $1 = qchem output file in an order list 
    tot=$(wc -l $1 | awk '{print $1}')
    suc=0
    for name in `cat $1`
    do 
        if [ -f $name ]
        then 
            s=$(grep -c Thank $name)
            suc=$(( $suc + $s ))
        fi 
    done 
    # suc=$(grep -c Thank *.out | cut -d ':' -f 2 | grep -c 1)
    fail=$(($tot-$suc))
    grep -c Thank *.out | grep -v :1 | cut -d ':' -f 1 > fail.dat

    echo "total: $tot, success: $suc, fail: $fail"
    echo ''
    echo 'Failed files: fail.dat '
    cat fail.dat 
    sed -i "$(($tot-$fail)),$ d" $1
}

function combineDir(){
    # input: 
    #   1. target directory 
    #   2. input sub-directory
    #   3. nother inputs: ordered_list.dat in each subdirectories
    # 
    # output: 
    #   reordered qchem output files 

    # combine directory and move point into target directory 
    rm -rf $tarDir 
    mkdir $tarDir
    totnpt=0
    for ((dir=0; dir<${#orderedSubDir[@]}; dir++))
    do 
        # echo $home/${orderedSubDir[$dir]}/${rootname[$dir]}_*_nonad.out $home/$tarDir 
        cp $home/${orderedSubDir[$dir]}/${rootName[$dir]}_*_nonad.out $home/$tarDir 
        grep nonad $home/${orderedSubDir[$dir]}/ordered_list.dat |  sed 's/_nonad.out//g' > $home/$tarDir/ordered_list.dat  

        cp $home/${orderedSubDir[$dir]}/${rootName[$dir]}*.te $home/$tarDir

        cp $home/${orderedSubDir[$dir]}/${rootName[$dir]}*.p $home/$tarDir

        # rename and reorder each point
        cd $home/$tarDir 
        for name in `cat ordered_list.dat`
        do 
            mv $name\_nonad.out $totnpt.out 
            mv $name.te $totnpt.te 
            mv $name.p $totnpt.p
            totnpt=$(($totnpt + 1 ))
        done  

    done 
}

function processData(){
    # $1 = target directory
    cd $home/$1 
    totnpt=$(ls | grep -v ${rootName[0]} | grep -c out)

    rm -f PE.dat TE.dat popu.dat traj.xyz Bonds.ang nonadCoup.dat 

    # Formating header for Bond.ang
    bondname=()
    for (( i=1;i<=$natom; i++ ))
    do 
        idx1=$(( $i - 1 ))
        for (( j=$(( $i+1 )); j<=$natom; j++ ))
        do 
            idx2=$(( $j - 1 ))
            bondname+=(  ${atomlist[$idx1]}$i${atomlist[$idx2]}$j )
        done 
    done 
    echo "#t ${bondname[@]}" > Bonds.ang 

    calcT=$(echo "scale=6; $tstep * $time2fs " | bc -l )

    # set parameters for extracting nonadiabatic coupling; testfile: 0.p
    tmp=$(grep -n 'Coupling vector' 0.p| cut -d ':' -f 1 )
    line_nonad_i=$(( $tmp +1 ))
    line_nonad_f=$(wc -l 0.p | cut -d ' ' -f 1 ) 
    n_nonad=$(( $nstate * ($nstate - 1) / 2 ))
    n_dof=$(( $natom * 3 ))
    # formating header for nonadCoup.dat 
    nonadname=() 
    for (( i=0; i < $nstate; i++ ))
    do 
        for (( j=$(( $i+1 )); j < $nstate; j++ ))
        do 
            nonadname+=( $i-$j )
        done 
    done 
    echo "#t ${nonadname[@]}"  > nonadCoup.dat 

    for ((pt_i=0; pt_i<$totnpt; pt_i++))
    do 
        # 1. grep potential energy in each state: E.dat 
        Energy=$(grep 'Total energy for state' $pt_i.out | awk '{print $6}')
        t_i=$(echo "scale=6; $pt_i * $calcT " | bc -l )
        echo $t_i ${Energy[@]} >> PE.dat

        te=$(cat $pt_i.te)
        echo $t_i $te >> TE.dat 

        # 2. generate xyz file for jmol molecular visulalization: traj.xyz 
        echo $natom >> traj.xyz 
        echo $t_i >> traj.xyz
        grep -A $(($natom + 2)) 'Standard Nuclear Orientation (Angstroms)' $pt_i.out | tail -n $natom | awk '{print $2, $3, $4, $5}' >> traj.xyz 

        # 3. calculate bond length: Bonds.ang 
        grep -A $(($natom + 2)) 'Standard Nuclear Orientation (Angstroms)' $pt_i.out | tail -n $natom | awk '{print $3, $4, $5}' > coord.tmp 
        genBondsFile $t_i coord.tmp #output: Bonds.ang

        # 4. Calculate population 
        popu=()
        sed -n "$((7+2*$natom)),$((6+2*$natom+$nstate)) p" $pt_i.p | sed 's/(//g' | sed 's/)//g' | sed 's/,/ /g' > popu.tmp
        for ((state_i=1;state_i<=$nstate;state_i++))
        do 
            popu_re=$(sed -n "$state_i,$state_i p" popu.tmp | awk '{print $1}')
            popu_im=$(sed -n "$state_i,$state_i p" popu.tmp | awk '{print $2}')
            popu+=( $(awk "BEGIN {print $popu_re * $popu_re + $popu_im * $popu_im  }") )
        done 
        echo $t_i ${popu[@]} >> popu.dat 

        # 5. Calculate nonadiabatic coupling 
        nonadCoup=()        
        sed -n "$line_nonad_i, $line_nonad_f p" $pt_i.p > coupling.tmp 
        for (( nonad_i=1; nonad_i<=$n_nonad; nonad_i++ ))
        do 
            c_i=$(( 1 + $n_dof * ($nonad_i -1) ))
            c_f=$(( $n_dof * $nonad_i ))
            sed -n "$c_i, $c_f p" coupling.tmp | awk '{print $1}' > coupling_element.tmp 
            coup_tot=0
            for elem in `cat coupling_element.tmp`
            do 
                coup_tot=$( awk "BEGIN {print $coup_tot + ($elem)^2}" )
            done 
            coup_tot=$( awk "BEGIN {print sqrt($coup_tot)}" )
            nonadCoup+=( $coup_tot )
        done
        echo $t_i ${nonadCoup[@]} >> nonadCoup.dat 

    done 
    rm -f coord.tmp popu.tmp coupling.tmp coupling_element.tmp 
    # clean metafiles
    rm -f *.out *.p *.te ordered_list.dat
    cd $home 
}

function genBondsFile(){
    # $1 = time 
    # $2 = coord.tmp 
    # output: Bonds.ang 

    t_i=$1 

    coord_x=()
    coord_y=()
    coord_z=()
    for ((coord_i=1;coord_i<=$natom;coord_i++))
    do 
        coord_x+=($(sed -n "$coord_i,$coord_i p" $2 | awk '{print $1}'))
        coord_y+=($(sed -n "$coord_i,$coord_i p" $2 | awk '{print $2}'))
        coord_z+=($(sed -n "$coord_i,$coord_i p" $2 | awk '{print $3}'))
    done 

    Bonds=()
    for (( i=0; i<$natom; i++ ))
    do 
        atom1=( ${coord_x[$i]} ${coord_y[$i]} ${coord_z[$i]} )
        for (( j=$(($i+1)); j<$natom; j++ ))
        do 
            atom2=( ${coord_x[$j]} ${coord_y[$j]} ${coord_z[$j]} )

            # Calculate the bond length between two atoms
            BL12=()
            for (( idx=0; idx < 3 ; idx++ ))
            do 
                minusSign=$(echo ${atom2[$idx]} | grep -c '-')
                if [ $minusSign == 0 ]
                then 
                    BL12+=( $(echo "scale=4;(${atom1[$idx]}-${atom2[$idx]})^2 "|bc -l) )
                else
                    num2=$(echo ${atom2[$idx]} | sed 's/-//g')
                    BL12+=( $(echo "scale=4;(${atom1[$idx]} + $num2 )^2 "|bc -l) )
                fi 
            done
            
            Bonds+=( $(echo "scale=4;sqrt(${BL12[0]} + ${BL12[1]} + ${BL12[2]})" | bc -l) )

        done 
    done 
    
    echo $t_i ${Bonds[@]} >> Bonds.ang
}

main $@