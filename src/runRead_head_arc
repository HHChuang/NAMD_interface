#!/bin/bash
# 2022/03/18, Grace, H.G.Chuang@leeds.ac.uk
# $1 = geom.xyz 

stat=7
statlist=()
for ((i=1; i <= $stat; i++))
do 
    statlist+=($i)
done
# echo ${statlist[@]}

function main(){
    # 1. Check environmental variables 
    export QC='/nobackup/chmhch/opt/qchem/5.4.0'
    # source /nobackup/chmhch/opt/qchem/5.4.0/qcenv.sh    
    # /nobackup/chmhch/opt/flexnet-11.18.0/lmutil lmreread
    source $QC/qcenv.sh 
    qchemProg="$QC/exe/qcprog.exe"

    checkInput $1 # output variable: $charge, $multi, $natom, $natom_2, $nfile 

    # 2. Calculate nonadiabatic coupling 
    calcNonAd $1 
    
    # 4. Calculate force in different excited state  
    # calcForce $1

}

function calcNonAd(){
    # $1 = geometry file 

    # first point 
    sed -n "1, $natom_2 p" $1 > tmp.tmp 
    name_i=$(sed -n "2, 2 p" tmp.tmp) 
    qchemOptionNonad SAD 
    genqchemInp $name_i tmp.tmp 
    $qchemProg $name_i.inp $name_i\_WF > $name_i.out 
    checkoutput_nonad $name_i
    
    j=1
    # following points
    for (( i=2;i<=$nfile;i++ ))
    do 
        if [ $j -eq 0 ] # rerun jobs
        then
            i=$(($i - 1))
        fi 

        # Generate qchem input file 
        ini=$(( 1 + ($i - 1) * $natom_2 ))
        fin=$(( $i * $natom_2 ))
        sed -n "$ini,$fin p" $1 > tmp.tmp
        name=$(sed -n "2, 2 p" tmp.tmp) 
         
        if [ $j -ne 0 ]
        then 
            qchemOptionNonad Read # output: qchemOption.tmp
            genqchemInp $name tmp.tmp 
        fi

        cp -r $name_i\_WF $name\_WF
        $qchemProg $name.inp $name\_WF > $name.out
        checkoutput_nonad $name 
        j=$?
        if [ $j -ne 0 ]  
        then 
            # pass job checking
            name_i=$name
        fi 
    done 

    rm -f qchemOption.tmp tmp.tmp 
}

function calcForce(){
    # $1 = geometry file 

    for (( i=1;i<=$nfile;i++))
    do 
        # Generate qchem input file 
        ini=$(( 1 + ($i - 1) * $natom_2 ))
        fin=$(( $i * $natom_2 ))
        sed -n "$ini,$fin p" $1 > tmp.tmp
        name_pre=$(sed -n "2, 2 p" tmp.tmp) 

        # calculate force in different states
        for (( j = 0; j<= $(( $stat - 1 )); j++ ))
        do 
            name=$name_pre\_force\_$j
            qchemOptionForce $j # output: qchemOption.tmp
            genqchemInp $name tmp.tmp 
            $qchemProg $name.inp $name_pre\_WF > $name.out
            checkoutput_force $name.out
        done 
    done 

    rm -f qchemOption.tmp tmp.tmp 
}

function checkInput(){
    [ "$1" == "" ] && echo "file $1 is not exist, exit" && exit

    natom=$(head -n 1 $1)
    natom_2=$(($natom+2))
    fileLine=$(wc -l $1 | awk '{print $1}')
    nfile=$(( $fileLine/($natom+2) ))

    read -p 'Please key-in the charge: ' charge
    read -p 'Please key-in the multiplicity: ' multi
}

function genqchemInp(){
    # $1 = name of the file
    # $2 = one geometry file 

cat << EOF > $1.inp
\$molecule
    $charge $multi
`tail -n $natom $2` 
\$end

EOF
cat qchemOption.tmp >> $1.inp
}

function qchemOptionNonad(){
    # $1 = Read or SAD
    

cat << EOF > qchemOption.tmp
\$rem
    !EXCHANGE            HF
    !CORRELATION         CI
    EXCHANGE            BHHLYP !50% HF +  50% Becke88 exchange
    BASIS               6-31+G*
    UNRESTRICTED        True
    MAX_SCF_CYCLES      500
    SYM_IGNORE          True
    SCF_Algorithm       DIIS
    SCF_GUESS           $1 

    SPIN_FLIP           True
    SET_Iter            100

    CALC_NAC            True 
    CIS_DER_NUMSTATE    $stat  
    
    CIS_N_ROOTS         $stat 
\$end

\$derivative_coupling
   comment https://manual.q-chem.com/5.0/sec-MECPs.html
    ${statlist[@]}
\$end

EOF
}

function qchemOptionForce(){
    # $1 = idx. of state 
cat << EOF > qchemOption.tmp
\$rem
    JOBTYPE             Force
    !EXCHANGE            HF
    !CORRELATION         CI
    EXCHANGE            BHHLYP !50% HF +  50% Becke88 exchange 
    BASIS               6-31+G*
    UNRESTRICTED        True
    MAX_SCF_CYCLES      500
    SYM_IGNORE          True
    SCF_Algorithm       DIIS
    SCF_GUESS           Read

    SPIN_FLIP           True
    SET_Iter            100

    CIS_STATE_DERIV     $1
    CIS_TRIPLETS        False
\$end

EOF
}

function checkoutput_nonad(){
    # $1 = name of the file 
    num=$(grep -c 'Thank you very much for using Q-Chem' $1.out )
    if [ $num -eq 0 ]
    then
        err=$(grep -c 'SCF failed to converge' $1.out )
        if [ $err -eq 1 ]
        then
            echo 'Change SCF algorithm to GDM'
            sed -i 's/DIIS/GDM/g' $1.inp
            return 0
        else
            echo "Failed Q-Chem output: $1.out" 
            exit
            # echo "Failed Q-Chem output; mix 10% orb in SCF and then rerun $1.inp"
            # sed -i 's/SCF_GUESS           Read/SCF_GUESS           Read \n SCF_GUESS_MIX 3/' $1.inp 
        fi
    else 
        echo $1.out
        return 1 
    fi
}

function checkoutput_force(){
    # $1 = name of the file 
    num=$(grep -c 'Thank you very much for using Q-Chem' $1 )
    if [ $num -eq 0 ]
    then
        echo "Q-Chem failed to run, please check $1"
        exit
    else 
        echo $1 
    fi
}
main $1 