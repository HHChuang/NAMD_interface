#!/bin/bash
# 2022/05/04, Grace, H.G.Chuang@leeds.ac.uk
# $1 = initial geometry file; *.xyz

# Global variables; $stat, $statlist, $charge, $multi
stat=7
statlist=()
for ((i=1; i <= $stat; i++))
do 
    statlist+=($i)
done
charge=0
multi=1
# echo ${statlist[@]}, $charge, $multi

function main(){
    # 1. Check 
    checkInput $1 # output: $natom, $ini_name, ini.xyz

    # 2. on-the-fly NAMD simulation 

    # 2.1 Calculate the first point 
    scf_guess=SAD
    calcNonAd $ini_name ini.xyz $scf_guess
    calcForce $ini_name ini.xyz
    #TODO: test sge file first 
    exit 

    #TODO: test MD program connection 
    # 2.2 Calculate the following points
    scf_guess=Read
    j=1
    for (( i=2;i<=$nfile;i++ ))
    do 
        if [ $j -eq 0 ] # rerun jobs
        then
            i=$(($i - 1))
        fi 

        # Generate qchem input file 
        ini=$(( 1 + ($i - 1) * $natom_2 ))
        fin=$(( $i * $natom_2 ))
        sed -n "$ini,$fin p" $1 > tmp.tmp
        name=$(sed -n "2, 2 p" tmp.tmp) 
        if [ $j -ne 0 ]
        then 
            # FIXME: call MD 
            qchemOptionNonad Read # output: qchemOption.tmp
            genqchemInp $name tmp.tmp 
        fi

        cp -r $name_i\_WF $name\_WF
        $qchemProg $name.inp $name\_WF > $name.out
        checkoutput_nonad $name 
        j=$?
        if [ $j -ne 0 ]  
        then 
            # pass job checking
            name_i=$name
        fi 
    done 

    # 2.3 Clean all temporary files
    rm -f qchemOption.tmp tmp.tmp 
}

function calcNonAd(){
    # $1 = name of file
    # $2 = geometry file
    # $3 = syntax of WF 

    qchemOptionNonad $3 # output: qchemOption.tmp 
    genqchemInp $1 $2 qchemOption.tmp 
    genQchemSGE $1 $1\_WF
    qcsub $1.sge
    checkoutput_nonad $1
}

function calcForce(){
    # $1 = name of file
    # $2 = geometry file

    # calculate force in different states
    for (( j = 0; j<= $(( $stat - 1 )); j++ ))
    do 
        name=$(echo $1\_force_$j)
        qchemOptionForce $j # output: qchemOption.tmp
        genqchemInp $name $2 qchemOption.tmp
        genQchemSGE $name $1\_WF
        checkoutput_force $name.out
    done 
}

function checkInput(){
    # $1 = initial point 
    # output: 
    #   1. $name 
    #   2. $ini_name 
    #   3. ini.xyz

    [ "$1" == "" ] && echo "file $1 is not exist, exit" && exit

    natom=$(head -n 1 $1)
    ini_name=$(sed -n "2, 2 p" $1) 
    tail -n $natom $1 > ini.xyz
}

function genqchemInp(){
    # $1 = name of the file
    # $2 = one geometry file 
    # $3 = qchemOption file

cat << EOF > $1.inp
\$molecule
    $charge $multi
`tail -n $natom $2` 
\$end

EOF
cat $3 >> $1.inp
}

function qchemOptionNonad(){
    # $1 = Read or SAD
    # output: 
    #   qchemOption.tmp 

cat << EOF > qchemOption.tmp
\$rem
    !EXCHANGE            HF
    !CORRELATION         CI
    EXCHANGE            BHHLYP !50% HF +  50% Becke88 exchange
    BASIS               6-31+G*
    UNRESTRICTED        True
    MAX_SCF_CYCLES      500
    SYM_IGNORE          True
    SCF_Algorithm       DIIS
    SCF_GUESS           $1 

    SPIN_FLIP           True
    SET_Iter            100

    CALC_NAC            True 
    CIS_DER_NUMSTATE    $stat  
    
    CIS_N_ROOTS         $stat 
\$end

\$derivative_coupling
   comment https://manual.q-chem.com/5.0/sec-MECPs.html
    ${statlist[@]}
\$end

EOF
}

function qchemOptionForce(){
    # $1 = idx. of state 
    # output:
    #   qchemOption.tmp
cat << EOF > qchemOption.tmp
\$rem
    JOBTYPE             Force
    !EXCHANGE            HF
    !CORRELATION         CI
    EXCHANGE            BHHLYP !50% HF +  50% Becke88 exchange 
    BASIS               6-31+G*
    UNRESTRICTED        True
    MAX_SCF_CYCLES      500
    SYM_IGNORE          True
    SCF_Algorithm       DIIS
    SCF_GUESS           Read

    SPIN_FLIP           True
    SET_Iter            100

    CIS_STATE_DERIV     $1
    CIS_TRIPLETS        False
\$end

EOF
}

function checkoutput_nonad(){
    # $1 = name of the file 
    num=$(grep -c 'Thank you very much for using Q-Chem' $1.out )
    if [ $num -eq 0 ]
    then
        err=$(grep -c 'SCF failed to converge' $1.out )
        if [ $err -eq 1 ]
        then
            echo 'Change SCF algorithm to GDM'
            sed -i 's/DIIS/GDM/g' $1.inp
            return 0
        else
            echo "Failed Q-Chem output: $1.out" 
            exit
            # echo "Failed Q-Chem output; mix 10% orb in SCF and then rerun $1.inp"
            # sed -i 's/SCF_GUESS           Read/SCF_GUESS           Read \n SCF_GUESS_MIX 3/' $1.inp 
        fi
    else 
        echo $1.out
        return 1 
    fi
}

function checkoutput_force(){
    # $1 = name of the file 
    num=$(grep -c 'Thank you very much for using Q-Chem' $1 )
    if [ $num -eq 0 ]
    then
        echo "Q-Chem failed to run, please check $1"
        exit
    else 
        echo $1 
    fi
}

function genQchemSGE(){
    # $1 = name of the file
    # $2 = name of scratch dir

cat << EOF > $1.sge
#!/bin/bash

### SGE Environment
#$ -S /bin/sh -w w   	        ### Run job through bash shell
#$ -j y							### Join stdout and stderr
#$ -l hostname=$nodelist		### Resource control"
#$ -cwd							### Use current working directory

echo "Working directory is \$SGE_O_WORKDIR"
cd \$SGE_O_WORKDIR

echo 'Job starts'
echo "    Host: \$HOSTNAME"
echo '    Date:' `date`
echo 'Directory:' `pwd` 

### QChem Setup 
export QC='/nobackup/chmhch/opt/qchem/5.4.0'
source $QC/qcenv.sh 
QCEXE="$QC/exe/qcprog.exe"

echo ''
echo == Q-CHEM Environment ==
echo qchem bindir is \$QC
test ! -d \$QCLOCALSCR && make -p \$QCLOCALSCR
echo qchem local scratch is \$QCLOCALSCR
test ! -d \$QCSCRATCH && make -p \$QCSCRATCH
echo qchem scratch isÂ§ \$QCSCRATCH

export PATH=$PATH:/opt/util

time \$QCEXE $1.inp $2 >& $1.out 
EOF
}

main $1 