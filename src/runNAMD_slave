#!/bin/bash
################################################################
# 
#   Purpose: 
#       Use Multiconfigurational Ehrenfest dynamics (AIMD) and  
#   Q-Chem (SF-TDDFT) for nonadiabatic molecular dynamic   
#   simulation on HPC platform. 
# 
#   Input:   
#       $1 = first point of trajectory 
#           *.iniPM (coordinate and momentum in a.u.)
# 
#       $2 = time step in a.u. (10. or 2.5)
#       $3 = 0 or 1, 0 = no cloning, 1 = have cloning
# 
#   Pre-requested:
#       1. EST: QChem program 
#       2. Nuclear parts: prop_prelim.x and prop_corr.x 
# 
#     2022/11/30, Grace, H.G.Chuang@leeds.ac.uk
# 
################################################################

function main(){
    # 1. Set parameters (global variables in bash shell script)
    setParameters $@

    # 2. Propagate trajectory 
    if [ $fileExten == 'iniPM' ] # 3.1 Start from molecular position and momentum 
    then 
        # 
        # Calculate the first point for its electronic wavefunction (WF) and then propagate the nuclear geometry.
        # 
        # input: 
        #       $1,iniPM 
        # output: 
        #       $1.1 and /$1_WF
        # metadata: 
        #       $1.0, $1.p, ${1}.out 
        # 
        calc1stPT_SGE $rootName

        # Based on the previous WF, propagate molecule by reading WF with new generated structure one-by-one. 
        propTraj_SGE $rootName 

    elif [ $fileExten == 'out' ] # 3.2 Start from existed WF and molecular geometry. 
    then 
        propTraj_SGE $rootName 
    else 
        echo 'Wrong file extension, stop program.'
        exit 
    fi 
}


function setParameters(){
    # Check if the input argument exist or not.
    [ "$1" == "" ] && echo "File $1 is not exist, stop program." && exit

    # Check the file extension 
    fileExten=$(echo $1 | cut -d '.' -f 2 )

    # Depend on the file extension, decide the $rootName. 
    if [ $fileExten == 'iniPM' ]
    then 
        rootName=$(echo $1 | cut -d '.' -f 1)
        step_ini=1
    elif [ $fileExten == 'out' ]
    then 
        rootName=$(echo $1 | sed 's/_/ /g' | awk '{print $1"_"$2}' )
        step_ini=$(echo $1 | cut -d _ -f 3)
    fi 

    # Set path for binary files 
    qchemProg='qchem'
    propPrelim="/home/home02/chmhch/NAMD_src/prop_prelim.x"
    propCorr="/home/home02/chmhch/NAMD_src/prop_corr.x"
    propCoor_clon="/home/home02/chmhch/NAMD_src/prop_corr_clon.x"

    # Nuclear dynamic setting 
    natom=9
    nstat=7
    ini_stat=5 # 0 = ground state
    nbranch=$3 # binary: 0 = no cloning,  1 = start cloning 
    time_ini=0.
    timestep=$2  # a.u., 2.4189 * 10^-17 
    bohr2ang=0.5292 # To be used in subroutine Bohr2Ang()
    if [ $timestep == '10.' ]
    then 
        tot_nsteps=900
    elif [ $timestep == '2.5' ]
    then 
        tot_nsteps=3000
    fi 

    if [ $nbranch == 1 ]
    then 
        propCoor=$propCoor_clon
    fi 
    
    # Basic electroic structure setting 
    charge=0
    multi=3
    statlist=()
    basis='6-31+G*'
    dft='BHHLYP'
    for ((i=1; i <= $nstat; i++))
    do 
        statlist+=($i)
    done
}


function calc1stPT_SGE(){
    # 
    # Input:
    #     $1 = root of filename 
    # 
    # Output: 
    #     $1.1 and /$1_WF
    # 
    # Metafiles: 
    #     Dynamics input files: 
    #         $1.0, $1.p and $1.1 
    # 

    # Nine steps to run the first point calculation: 

    #     1. Extracting position and momentum to form the header of the dynamic file 
    #         input: $1.iniPM 
    #         output: $1.0 (header part)
    rootName=$1 
    genDFheader $rootName.0 

    #     2. Calculate non-adiabatic coupling.
    #         program: Q-Chem 
    #         input: $1_nonad.inp
    #         output: $1_nonad.out and /$1_WF

    calcQChemNonad $rootName SAD $rootName.0  

    #     3. Calculate force in different electronic states. 
    #         program: Q-Chem
    #         input: $1_force_*.inp 
    #         output: $1_force_*.out and /$1_WF
    for (( i=1;i<= $nstat;i++ ))
    do 
        calcQChemForce $rootName $i $1.0
    done 

    #     4. Extract EST information to complete the dynamic file.
    #         input: $1_nonad.out and $1_force_*.out 
    #         output: $1.0 (completed) 
    genDFtail $rootName $rootName.0 

    #     5. Nuclear preliminary propagation 
    #         program: prop_prelim.x
    #         input: $1.0 
    #         output: $1.p 
    $propPrelim $rootName # input: $1.0, output: $1.p

    #     6. Calculate non-adiabatic coupling.
    #         program: Q-Chem
    #         input: $1_nonad.inp
    #         output: $1_nonad.out and /$1_WF
    calcQChemNonad $rootName Read $rootName.p
            
    #     7. Calculate force in different electronic states. 
    #         program: Q-Chem
    #         input: $1_force_*.inp 
    #         output: $1_force_*.out and /$1_WF
    for (( i=1;i<= $nstat;i++ ))
    do 
        calcQChemForce $rootName $i $rootName.p
    done

    #     8. Extract EST information to write another dynamic file.
    #         input: $1_nonad.out and $1_force_*.out 
    #         output: $1.p (completed) 
    genDFtail $rootName $rootName.p

    #     9. Final nuclear propagation 
    #         program: prop_corr.x 
    #         input: $1.p 
    #         output: $1.1 
    $propCorr $rootName 
}


function propTraj_SGE(){
    # 
    #   Input:
    #     $1 = rootof filename
    # 
    #   Output: 
    #     1. $rootName.1
    #     2. $rootName\_nonad.out 
    #     3. $rootName\_force_#.out 
    #     4. /$rootName\_WF
    # 

    # 
    # 1. Set parameters
    # 
    RootName=$1
    nameWFDir=($RootName\_WF) # Store the directory name of electronic wavefunctions (WF)
    nwfDir=3 # maximum number of stored WF 
    if [ $step_ini == 1 ] 
    then 
        pt_name_i=$RootName
    else 
        pt_name_i=$RootName\_$(($step_ini - 1 )) 
    fi 

    # 
    # 2. Calculate the first $nwfDir points in order to store electronic wavefunctions
    # 
    for (( step_i=$step_ini;step_i<=$(($step_ini + $nwfDir));step_i++ ))
    do 
        pt_name=$RootName\_$step_i
        cp $pt_name_i.1 $pt_name.0
        cp -r $pt_name_i\_WF $pt_name\_WF
        prop1PT_SGE $pt_name Read
        check_clon $pt_name 
        pt_name_i=$pt_name 
        nameWFDir+=($pt_name\_WF)
    done 

    # 
    # 3. Keep replacing the stored WFs, and then propagate molecule.
    # 
    for (( step_i=$(($step_ini + $nwfDir + 1));step_i<=$tot_nsteps;step_i++ ))
    do 
        pt_name=$RootName\_$step_i
        cp $pt_name_i.1 $pt_name.0
        cp -r $pt_name_i\_WF $pt_name\_WF
        prop1PT_SGE $pt_name Read
        pt_name_i=$pt_name 
        nameWFDir+=($RootName\_$(($step_i-$nwfDir))\_WF)
        echo ${nameWFDir[@]} | xargs rm -rf 
    done 
    rm -f qchemOption.tmp tmp.tmp 
}


function calcQChemNonad(){
    # $1 = root of QChem file name 
    # $2 = syntax for electronic wavefunction 
    # $3 = dynamic file; *.0, *.p or *.1

    name_n=$1\_nonad
    qchemOptionNonad $2 # output: qchemOption.tmp
    genqchemInp  $name_n $3 qchemOption.tmp
    qsubSGEfile $name_n $1 # output: $name_n.out, /$1_WF
    check_calc $name_n $1
    rm -f qchemOption.tmp 
}


function calcQChemForce(){
    # $1 = root of QChem file name 
    # $2 = order of excited state 
    # $3 = dynamic file; *.0, *.p or *.1

    name_f=$1\_force\_$2
    qchemOptionForce $2 # output: qchemOption.tmp
    genqchemInp  $name_f $3 qchemOption.tmp
    qsubSGEfile $name_f $1 # output: $name_f.out, /$1_WF
    check_calc $name_f $1
    rm -f qchemOption.tmp 
}


function prop1PT_SGE(){
    # 
    #   Input:
    #     $1 = root of filename 
    # 
    #   Output:
    #         $1.1
    # 
     
    rootName=$1 

    #     1. Nuclear preliminary propagation 
    #         program: prop_prelim.x
    #         input: $1.0 
    #         output: $1.p 
    $propPrelim $rootName 

    #     2. Calculate non-adiabatic coupling.
    #         program: Q-Chem
    #         input: $1_nonad.inp
    #         output: $1_nonad.out and /$1_WF
    calcQChemNonad $rootName Read $rootName.p
            
    #     3. Calculate force in different electronic states. 
    #         program: Q-Chem
    #         input: $1_force_*.inp 
    #         output: $1_force_*.out and /$1_WF
    for (( i=1;i<= $nstat;i++ ))
    do 
        calcQChemForce $rootName $i $rootName.p
    done

    #     4. Extract EST information to 
    #         input: $1_nonad.out and $1_force_*.out 
    #         output: $1.p (completed) 
    genDFtail $rootName $rootName.p

    #     5. Final nuclear propagation 
    #         program: prop_corr.x 
    #         input: $1.0 and $1.p 
    #         output: $1.1 or $1.1 and $1.2 for cloning
    $propCorr $rootName 

}


function genDFheader(){
    # 
    # Input:
    #   $1 = file name 
    # 

    echo "$natom $nstat   ! Number of atoms and number of states" > $1 
    echo "$nbranch ! Branch number; 0 - no cloning " >> $1 
    echo "$time_ini $timestep !Time and timestep " >> $1 
    echo '! Positions' >> $1 
    cat $rootName.iniPM >> $1
    echo '!Ehrenfest amplitudes (complex numbers)'  >> $1
    for ((i=0;i<$nstat;i++))
    do 
        if [ i == $ini_stat ]
        then
             echo '0.1000000000000000E+01' >> $1
        else 
            echo '0.0000000000000000E+00' >> $1
        fi 
    done 
    echo '!Potential energies, #state' >> $1
}


function genDFtail(){
    # Input:
    #   $1 = root of file name 
    #   $2 = name of outupt file 

    rootName=$1 

    grep 'Total energy for state ' $rootName\_nonad.out \
        | awk '{print $6, $5}' | sed 's/://g' | head -n $nstat >> $2
    
    get_force $2 $rootName\_force 
    get_nonad $2 $rootName\_nonad.out 
}


function get_nonad(){
    # 
    # Input: 
    #       $1 = name of input for dynamic calculation
    #       $2 = name of QChem output file 
    # 

    name=$1
    name_nonad=$2 

    echo '!Coupling vector, #state1 < #state2,  #component !!The code reads only 3*n_atoms*n_states*(n_states-1) lines for coupling!!!' >> $name
    
    k=0
    for ((i=1; i<=$nstat; i++))
    do 
        for ((j=$i+1; j<=$nstat; j++))
        do
            grep -A $(($natom + 2 )) 'derivative coupling without ' $name_nonad \
            | sed -n "$((4 + $k*($natom+4) )), $((3+$natom + $k*($natom+4) )) p" | awk '{print $2,$3,$4}' > coupling.tmp 
            component=1
            for ((na=1; na<=$natom; na++))
            do 
                for ((coord=1; coord<=3; coord++))
                do 
                    cp=$(sed -n "$na, $na p " coupling.tmp | awk "{print \$$coord}" ) 
                    echo $cp $i $j $component >> $name
                    component=$(($component + 1))
                done 
            done 
            k=$(($k + 1)) # derivative coupling matrix 
        done 
    done 
    rm -f coupling.tmp 
}


function get_force(){
    # 
    # Input:
    #       $1 = name of input for dynamic calculation
    #       $2 = root name of QChem output file 
    # 
    
    name=$1
    name_force=$2 

    # unit in qchem: Hartree/Bohr
    echo '!Forces, #state, #component' >> $name
    for ((stat_i=1; stat_i<= $nstat ; stat_i++))
    do 
        # extrat gradient to meta file totforce.tmp 
        # format: one row has infor. for 6 atoms
        grep -A 4 'Gradient of the state energy (including CIS Excitation Energy)' $name_force\_$stat_i.out | tail -n 3 | awk '{print $2,$3,$4,$5,$6,$7}' > totforce.tmp 
        # TODO: change this part 
        if (( $natom > 6 ))
        then 
            grep -A 8 'Gradient of the state energy (including CIS Excitation Energy)' $name_force\_$stat_i.out | tail -n 3 | awk '{print $2,$3,$4,$5,$6,$7}' > totforce1.tmp
            mv totforce.tmp tmp 
            paste tmp totforce1.tmp > totforce.tmp 
            rm -f tmp totforce1.tmp  
        fi 

        rm -f force.tmp 
        atom_idx=1
        for ((na=1; na<=$natom; na++))
        do 
                awk "{ print \$$na }" totforce.tmp >> force.tmp 
            for ((j=1;j<=3;j++)) 
            do
                force=$(sed -n "$atom_idx,$atom_idx p" force.tmp)
                
                # change sign by checking the first character 
                # negative -> remove the negative sign
                # positive -> add the negative sign
                [ ${force:0:1} = - ] && force=$( echo $force | cut -c2-) || force=$( echo $force | sed 's/^/-/g' )

                echo $force $stat_i $atom_idx >> $name
                atom_idx=$(($atom_idx + 1))
            done 
        done 
    done 
    rm -f totforce.tmp force.tmp 
}


function genqchemInp(){
    # '''
    #     $1 = name of the file
    #     $2 = one geometry file (Bohr)
    #     $3 = qchemOption.tmp
    # '''

    # Change unit from Bohr to Angstrom
    Bohr2Ang $2 # output: geom_ang.tmp 

cat << EOF > $1.inp
\$molecule
    $charge $multi
`paste atomlist.tmp geom_ang.tmp`
\$end

EOF
cat $3 >> $1.inp
rm -f atomlist.tmp geom_bohr.tmp geom_ang.tmp 
}


function qsubSGEfile(){
    # 
    # Input: 
    #       $1 = name of qchem file  
    #       $2 = root of file name 
    # 

cat << EOF > $2.sge
#!/bin/bash 

# SGE environment setting 
#$ -cwd -V          # run with current set of modules and in the current dir. 
#$ -j y             # combine std-out and std-err
#$ -l h_vmem=4G     # request some memory per core
#$ -l h_rt=0:15:0   # max 48 hours 
#$ -pe smp 9

# Q-Chem environment setting 
module add test qchem 

time qchem -nt \$NSLOTS $1.inp $1.out $2_WF


EOF

qsub -sync y $2.sge

}


function Bohr2Ang(){
    # 
    # Input:
    #   $1 = *.1 ; dynamic information input fule
    # 
    # Output: 
    #   geom_ang.tmp 
    # 

    sed -n "5, $((4 + $natom)) p" $1 | awk '{print $1}' > atomlist.tmp 
    sed -n "5, $((4 + $natom)) p" $1 | awk '{print $2, $3, $4}' > geom_bohr.tmp 
    rm -f geom_ang.tmp 
    for ((natom_i=1;natom_i<=$natom;natom_i++))
    do 
        x_bohr=$(sed -n "$natom_i,$natom_i p" geom_bohr.tmp | awk '{print $1}')
        y_bohr=$(sed -n "$natom_i,$natom_i p" geom_bohr.tmp | awk '{print $2}')
        z_bohr=$(sed -n "$natom_i,$natom_i p" geom_bohr.tmp | awk '{print $3}')
        x_ang=$( awk " BEGIN {print $x_bohr * $bohr2ang }")
        y_ang=$( awk " BEGIN {print $y_bohr * $bohr2ang }")
        z_ang=$( awk " BEGIN {print $z_bohr * $bohr2ang }")
        echo $x_ang $y_ang $z_ang >> geom_ang.tmp 
    done

}


function qchemOptionNonad(){
    # $1 = Read or SAD
    
cat << EOF > qchemOption.tmp
\$rem
    !EXCHANGE            HF
    !CORRELATION         CI
    EXCHANGE            BHHLYP !50% HF +  50% Becke88 exchange
    BASIS               6-31+G*
    UNRESTRICTED        True
    MAX_SCF_CYCLES      500
    SYM_IGNORE          True
    SCF_Algorithm       DIIS
    SCF_GUESS           $1 

    SPIN_FLIP           True
    SET_Iter            100

    CALC_NAC            True 
    CIS_DER_NUMSTATE    $nstat  
    
    CIS_N_ROOTS         $nstat 
\$end

\$derivative_coupling
   comment https://manual.q-chem.com/5.0/sec-MECPs.html
    ${statlist[@]}
\$end

EOF
}

function qchemOptionForce(){
    # $1 = idx. of state 
cat << EOF > qchemOption.tmp
\$rem
    JOBTYPE             Force
    !EXCHANGE            HF
    !CORRELATION         CI
    EXCHANGE            BHHLYP !50% HF +  50% Becke88 exchange 
    BASIS               6-31+G*
    UNRESTRICTED        True
    MAX_SCF_CYCLES      500
    SYM_IGNORE          True
    SCF_Algorithm       DIIS
    SCF_GUESS           Read

    SPIN_FLIP           True
    SET_Iter            300

    CIS_N_ROOTS         $1
    CIS_STATE_DERIV     $1
    CIS_TRIPLETS        False
\$end

EOF
}


function check_calc(){
    # $1 = name of the qchem file 
    # $2 = root of file name 

    num=$(grep -c 'Thank you very much for using Q-Chem' $1.out )
    if [ $num -eq 0 ]
    then
        err=$(grep -c 'SCF failed to converge' $1.out )
        if [ $err -eq 1 ]
        then
            echo 'Change SCF algorithm to GDM'
            sed -i 's/DIIS/GDM/g' $1.inp
            qsubSGEfile $1.inp $2 
            return 0
        else
            echo "Failed Q-Chem output: $1.out" 
            exit 1 
            # echo "Failed Q-Chem output; mix 10% orb in SCF and then rerun $1.inp"
            # sed -i 's/SCF_GUESS           Read/SCF_GUESS           Read \n SCF_GUESS_MIX 3/' $1.inp 
        fi
    else 
        echo $1.out
        return 1 
    fi
}


function check_clon(){
    # 
    # Input: 
    #   $1 = file name 
    # 

    checkname=$1 
    if [ -f $checkname.2 ]
    then 
        echo "Cloning happens at $checkname"
        filename=$(grep 'Branch number' $checkname.2 | awk '{print $1}')
        mkdir ../$filename 
        cp -r $checkname* ../$filename 
        screen -d -m bash -c "cd ../$filename; $0 $checkname\_nonad.out $timestep"
    fi 
}


main $@